/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.innerspec.main;

import java.net.URL;
import java.util.ArrayList;
import javax.swing.ImageIcon;

/**
 *  Displays information related to the end output of the Gerber file. Most 
 *  output information comes from GerberFileManager.
 * 
 * @author Zachary Geier - zdgeier@gmail.com - Innerspec Technologies Inc.
 */
public class ProgressFrame extends javax.swing.JFrame {
    private int progressPercent = 0;
    private ArrayList<String> errorMessages = new ArrayList<String>();
    private boolean doneWriting = false;
    
    /**
     * Creates new form ProgressFrame
     */
    public ProgressFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        URL iconURL = getClass().getResource("/com/innerspec/resources/InnerspecLogo.png");
        // iconURL is null when not found
        ImageIcon icon = new ImageIcon(iconURL);
        this.setIconImage(icon.getImage());
        progressTextArea = new javax.swing.JTextArea();
        progressButton = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Conversion Results");
        setResizable(false);

        progressTextArea.setEditable(false);
        progressTextArea.setColumns(20);
        progressTextArea.setFont(new java.awt.Font("Arial Unicode MS", 0, 13)); // NOI18N
        progressTextArea.setRows(5);
        jScrollPane1.setViewportView(progressTextArea);

        progressButton.setText("Exit");
        progressButton.setEnabled(false);
        progressButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                progressButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(progressButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressButton)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void progressButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_progressButtonActionPerformed
        dispose();
        System.exit(0);
        //END OF PROGRAM
    }//GEN-LAST:event_progressButtonActionPerformed
                    
    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(
                    javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProgressFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProgressFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProgressFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProgressFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProgressFrame().setVisible(false);  //Initially invisible
            }
        });
    }
    
    /**
     * Signals the GerberFileManager to start writing the Gerber files. This 
     * happens only after the user has clicked the "Next" button on the
     * DataFrame.
     */
    public void initializeGerberManager(){
        //Runs gerber generation in parallel
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run(){
                GerberFileManager.startWriting();
            }
        });
    }
    
    /**
     * Adds an output string to the ProgressFrame output. Once event progress
     * values add up to 100%, the application will stop and allow the user to
     * exit.
     * 
     * @param eventName         The string to be output to the text area. New 
     *                          line characters are automatically added to the
     *                          beginning of the line.
     * @param eventProgress     The value to be added to the overall percent
     *                          progress. For example, if event progress values
     *                          25 and 75 are passed to this function, then the
     *                          "Exit" button will be enabled.
     */
    public void addProgressEvent(String eventName, int eventProgress){
        progressPercent += eventProgress;
        progressTextArea.append("\n" + eventName);
        
        //Enables Exit button if finished
        if(progressPercent >= 100){
            progressButton.setEnabled(true);
        }
    }
    
    public void setDoneWriting(boolean val){
        doneWriting = val;
        
        addProgressEvent("\nConversion Complete.", 0);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton progressButton;
    private javax.swing.JTextArea progressTextArea;
    // End of variables declaration//GEN-END:variables
}
